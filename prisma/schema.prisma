// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Address {
  id           String   @id @default(uuid()) @db.Uuid
  neighborhood String
  street       String
  number       String
  city         String
  state        String
  cep          String
  complement   String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  User         User[]
}

model User {
  id                    String            @id @default(uuid()) @db.Uuid
  full_name             String
  phone_number          String
  email                 String            @unique
  identifier            String            @unique
  password              String
  token_phone           String?
  token_password_change String?           @db.Char(6)
  type                  String?
  address_id            String?           @db.Uuid
  role                  String?
  created_at            DateTime          @default(now())
  updated_at            DateTime          @updatedAt
  path_profile_image    String?
  address               Address?          @relation(fields: [address_id], references: [id])
  ServiceProvider       ServiceProvider[]
  Vehicle               Vehicle[]

  ServiceProviderOnline    ServiceProviderOnline[]
  serviceRequestedClient   ServiceRequested[]      @relation("UserClient")
  serviceRequestedProvider ServiceRequested[]      @relation("UserProviderService")
}

model ServiceProvider {
  id                     String                   @id @default(uuid()) @db.Uuid
  path_to_image_cnh      String?
  cnh                    String                   @unique
  created_at             DateTime                 @default(now())
  updated_at             DateTime                 @updatedAt
  user_id                String                   @db.Uuid
  user                   User                     @relation(fields: [user_id], references: [id])
  ServiceProviderService ServiceProviderService[]
}

model Service {
  id                     String                   @id @default(uuid()) @db.Uuid
  description            String?
  title                  String?
  price_service          Float                    @default(0.00)
  price_km_traveled      Float                    @default(0.00)
  created_at             DateTime                 @default(now())
  updated_at             DateTime                 @updatedAt
  ServiceProviderService ServiceProviderService[]
  ServiceRequested       ServiceRequested[]
}

model Vehicle {
  id               String   @id @default(uuid()) @db.Uuid
  model            String
  mark             String
  plate            String
  color            String
  path_to_document String
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  user_id          String?  @db.Uuid
  User             User?    @relation(fields: [user_id], references: [id])

  serviceRequestedClient   ServiceRequested[] @relation("VehicleClient")
  serviceRequestedProvider ServiceRequested[] @relation("VehicleProvider")
}

model ServiceProviderService {
  id                String          @id @default(uuid()) @db.Uuid
  serviceProviderId String          @db.Uuid
  serviceId         String          @db.Uuid
  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt
  serviceProvider   ServiceProvider @relation(fields: [serviceProviderId], references: [id])
  service           Service         @relation(fields: [serviceId], references: [id])
}

model ServiceRequested {
  id                            String   @id @default(uuid()) @db.Uuid
  user_id_provider_service      String?  @db.Uuid
  service_id                    String   @db.Uuid
  user_id_client                String?  @db.Uuid
  status                        Int      @default(0)
  latitude_client               Float?
  longitude_client              Float?
  latitude_service_provider     Float?
  longitude_service_provider    Float?
  service_provider_socket_io_id String?
  user_id_socket_io_id          String?
  vehicle_id_client             String   @db.Uuid
  vehicle_id_service_provider   String?  @db.Uuid
  created_at                    DateTime @default(now())
  updated_at                    DateTime @updatedAt

  service               Service @relation(fields: [service_id], references: [id])
  user_client           User?   @relation("UserClient", fields: [user_id_client], references: [id])
  user_provider_service User?   @relation("UserProviderService", fields: [user_id_provider_service], references: [id])

  vehicle                  Vehicle  @relation("VehicleClient", fields: [vehicle_id_client], references: [id])
  vehicle_service_provider Vehicle? @relation("VehicleProvider", fields: [vehicle_id_service_provider], references: [id])
}

model ServiceProviderOnline {
  id           String  @id @default(uuid()) @db.Uuid
  user_id      String? @unique @db.Uuid
  socket_io_id String
  state        Int
  user         User?   @relation(fields: [user_id], references: [id])
}

model Log {
  id        String   @id @default(uuid())
  tableName String
  action    String
  oldData   Json?
  newData   Json?
  timestamp DateTime @default(now())
}
